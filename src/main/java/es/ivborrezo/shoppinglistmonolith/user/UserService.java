package es.ivborrezo.shoppinglistmonolith.user;

import java.lang.reflect.Field;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import es.ivborrezo.shoppinglistmonolith.exception.ResourceNotFoundException;
import es.ivborrezo.shoppinglistmonolith.exception.UnprocessableEntityException;

@Service
public class UserService {

	private static final Logger logger = LoggerFactory.getLogger(UserService.class);

	private UserRepository userRepository;

	public UserService(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	public Page<User> getAllUsers(int pageNumber, int pageSize) {
		Pageable pageable = PageRequest.of(pageNumber, pageSize);
		return userRepository.findAll(pageable);
	}

	/**
	 * Retrieves a paginated list of users based on specified filters and sorting
	 * criteria.
	 *
	 * @param userName           Filter string for user name.
	 * @param email              Filter string for email.
	 * @param firstName          Filter string for first name.
	 * @param lastName           Filter string for last name.
	 * @param dateOfBirthGreater Filter for users born on or after a specified date.
	 * @param dateOfBirthLess    Filter for users born before a specified date.
	 * @param phoneNumber        Filter string for phone number.
	 * @param pageNumber         Page number for pagination.
	 * @param pageSize           Number of items per page.
	 * @param orderList          List of Sort.Order objects representing sorting
	 *                           criteria.
	 * @return Page object containing the users matching the specified criteria.
	 */
	public Page<User> getUsersBySpecification(String userName, String email, String firstName, String lastName,
			LocalDate dateOfBirthGreater, LocalDate dateOfBirthLess, String phoneNumber, int pageNumber, int pageSize,
			List<Sort.Order> orderList) {

		// Create pageable object for pagination and sorting
		Pageable pageable = PageRequest.of(pageNumber, pageSize, Sort.by(orderList));

		// Initialize the specification with a null condition
		Specification<User> spec = Specification.where(null);

		// Add filters to the specification if the filter strings are not null or empty
		if (userName != null && !userName.isEmpty())
			spec = spec.and(UserSpecifications.likeUserName(userName));

		if (email != null && !email.isEmpty())
			spec = spec.and(UserSpecifications.likeEmail(email));

		if (firstName != null && !firstName.isEmpty())
			spec = spec.and(UserSpecifications.likeFirstName(firstName));

		if (lastName != null && !lastName.isEmpty())
			spec = spec.and(UserSpecifications.likeLastName(lastName));

		if (dateOfBirthGreater != null)
			spec = spec.and(UserSpecifications.byDateOfBirthGreaterThan(dateOfBirthGreater));

		if (dateOfBirthLess != null)
			spec = spec.and(UserSpecifications.byDateOfBirthLessThan(dateOfBirthLess));

		if (phoneNumber != null && !phoneNumber.isEmpty())
			spec = spec.and(UserSpecifications.likePhoneNumber(phoneNumber));

		// Retrieve users from the repository based on the specification and pageable
		Page<User> pageUsers = userRepository.findAll(spec, pageable);

		logger.trace(
				"Retrieved {} users with filters: userName={}, email={}, firstName={}, lastName={}, dateOfBirthGreater={}, dateOfBirthLess={}, phoneNumber={}, pageNumber={}, pageSize={}, orderBy={}",
				pageUsers.getNumberOfElements(), userName, email, firstName, lastName, dateOfBirthGreater,
				dateOfBirthLess, phoneNumber, pageNumber, pageSize, orderList);

		return pageUsers;
	}

	/**
	 * Retrieves a user by their ID.
	 *
	 * @param id The ID of the user to retrieve.
	 * @return The user with the specified ID.
	 * @throws ResourceNotFoundException if no user is found with the given ID.
	 */
	public User getUserById(Long id) {
		logger.info("Attempting to retrieve user with ID: {}", id);

		Optional<User> optionalUser = userRepository.findById(id);
		if (optionalUser.isPresent()) {
			User user = optionalUser.get();
			logger.trace("User found with ID {}", id);
			return user;
		} else {
			String errorMessage = String.format("User not found with ID: %d", id);
			logger.error(errorMessage);
			throw new ResourceNotFoundException(errorMessage, "getUserById", "id", id.toString());
		}
	}

	public User addUser(User user) {
		if (user.getUserId() != null)
			throw new UnprocessableEntityException("User id should be null. Id it's autogenerated",
					User.class.toString(), "id", user.getUserId().toString());

		return userRepository.save(user);
	}

	public User updateUserPartially(Long id, User incompleteUser) {
		User existingUser = userRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + id, "updateUserPartially",
						"id", id.toString()));

		Class<?> userClass = User.class;
		Field[] userFields = userClass.getDeclaredFields();

		for (Field field : userFields) {
			field.setAccessible(true);
			try {
				Object value = field.get(incompleteUser);

				if (value != null) {
					field.set(existingUser, value);
				}
			} catch (IllegalArgumentException | IllegalAccessException e) {
				// Log the exception
			}

			field.setAccessible(false);
		}

		return userRepository.save(existingUser);
	}

	public void deleteUserById(Long id) {
		userRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + id,
				"deleteUserById", "id", id.toString()));

		userRepository.deleteById(id);
	}
}
